Перем ПутьКФайлу;
//Перем ТекущийУзел;
Перем ПоискПоЛокальномуИмени;
Перем ИмяИскомогоТэга;
Перем ВыражениеФильтра;
Перем Чтение;


#Область Внешний_API
Функция Следующий() Экспорт
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ?(ПоискПоЛокальномуИмени, Чтение.ЛокальноеИмя = ИмяИскомогоТэга, Чтение.Имя = ИмяИскомогоТэга) Тогда
			
			//Тут надо создать тэг и заполнить его дочерними тэгами
			ТекущийУзел.Строки.Очистить();
			
			ЗаполнитьТекущийУзел();
			
			Если ВыражениеФильтра = Неопределено Тогда
				Возврат Истина;
			Иначе
				УсловиеВыполняется = Ложь;
				
				Если ЕстьТэг(ВыражениеФильтра.ПутьКСвойству, ПоискПоЛокальномуИмени) Тогда
					УсловиеВыполняется = ЗначениеТэга(ВыражениеФильтра.ПутьКСвойству, ПоискПоЛокальномуИмени) = ВыражениеФильтра.Эталон;
				КонецЕсли;
				
				Если Не УсловиеВыполняется И ЕстьАтрибут(ВыражениеФильтра.ПутьКСвойству, ПоискПоЛокальномуИмени) Тогда
					УсловиеВыполняется = ЗначениеАтрибута(ВыражениеФильтра.ПутьКСвойству, ПоискПоЛокальномуИмени) = ВыражениеФильтра.Эталон;
				КонецЕсли;
				                             
				Если УсловиеВыполняется Тогда
					Возврат Истина;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

Функция ЗначениеТэга(ПутьКТэгу, ПоЛокальнымИменам=Ложь) Экспорт
	
	Путь = РазложитьСтрокуВМассивПодстрок(ПутьКТэгу, ".");
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	
	Инд = 0;
	
	Для Каждого Тэг Из Путь Цикл
		
		Если ПоЛокальнымИменам Тогда
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ЛокальноеИмяТэга");
		Иначе
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ИмяТэга");
		КонецЕсли;
		
		Если НужнаяСтрока = Неопределено Тогда
			ВызватьИсключение "В пути [" + ПутьКТэгу + "] отсутствует элемент [" + Тэг + "]";
		КонецЕсли;
		
		Если Инд = Путь.Количество()-1 Тогда
			Если НужнаяСтрока = Неопределено Тогда
				Возврат Неопределено;
			Иначе       
				Возврат НужнаяСтрока.ЗначениеТэга;
			КонецЕсли;
		Иначе
			ТекущийНаборСтрок = НужнаяСтрока.Строки;
		КонецЕсли;	
		
		Инд = Инд + 1;
		
	КонецЦикла;	
	
КонецФункции

Функция ЗначениеАтрибута(ПутьКАтрибуту, ПоЛокальнымИменам=Ложь) Экспорт
	
	Путь = РазложитьСтрокуВМассивПодстрок(ПутьКАтрибуту, ".");
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	
	Инд = 0;
	
	Для Каждого Тэг Из Путь Цикл
		
		Если ПоЛокальнымИменам Тогда
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ЛокальноеИмяТэга");
		Иначе
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ИмяТэга");
		КонецЕсли;
		
		Если НужнаяСтрока = Неопределено Тогда
			ВызватьИсключение "В пути [" + ПутьКАтрибуту + "] отсутствует элемент [" + Тэг + "]";
		КонецЕсли;
		
		Если Инд = Путь.Количество()-2 Тогда
			Возврат НужнаяСтрока.Атрибуты.Получить(Путь[Инд + 1]);
		Иначе
			ТекущийНаборСтрок = НужнаяСтрока.Строки;
		КонецЕсли;	
		
		Инд = Инд + 1;
		
	КонецЦикла;
	
КонецФункции

Функция Тэги(ПутьКТэгам, ПоЛокальнымИменам=Ложь) Экспорт

	Путь = РазложитьСтрокуВМассивПодстрок(ПутьКТэгам, ".");
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	
	Инд = 0;
	
	Для Каждого Тэг Из Путь Цикл
		
		Если ПоЛокальнымИменам Тогда
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ЛокальноеИмяТэга");
		Иначе
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ИмяТэга");
		КонецЕсли;
		
		Если НужнаяСтрока = Неопределено Тогда
			ВызватьИсключение "В пути [" + ПутьКТэгам + "] отсутствует элемент [" + Тэг + "]";
		КонецЕсли;
		
		Если Инд = Путь.Количество()-2 Тогда
			
			ИмяИскомыхТэгов = Путь[Инд + 1];
			
			Если ПоЛокальнымИменам Тогда
				Отбор = Новый Структура("ЛокальноеИмяТэга", ИмяИскомыхТэгов);
			Иначе
				Отбор = Новый Структура("ИмяТэга", ИмяИскомыхТэгов);
			КонецЕсли;
			
			
			ИскомыеУзлы = НужнаяСтрока.Строки.НайтиСтроки(Отбор, Ложь);
			
			МассивТэгов = Новый Массив;
			
			Для Каждого Узел Из ИскомыеУзлы Цикл
				НовыйТэг = Обработки.РазборРазметки.Создать();
				
				КорневаяСтрока = НовыйТэг.ТекущийУзел.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(КорневаяСтрока, Узел);			
				ЗаполнитьДеревоПоСтроке(КорневаяСтрока, Узел);
				МассивТэгов.Добавить(НовыйТэг);
			КонецЦикла;
			
			Возврат МассивТэгов;
			
		Иначе
			ТекущийНаборСтрок = НужнаяСтрока.Строки;
		КонецЕсли;	
		
		Инд = Инд + 1;
		
	КонецЦикла;	
	
КонецФункции

Функция ЕстьСвойство(ПутьКСвойству, ПоЛокальнымИменам=Ложь) Экспорт
	Возврат ЕстьТэг(ПутьКСвойству, ПоЛокальнымИменам) ИЛИ ЕстьАтрибут(ПутьКСвойству, ПоЛокальнымИменам);
КонецФункции

Функция ЕстьТэг(ПутьКТэгу, ПоЛокальнымИменам=Ложь) Экспорт
	Путь = РазложитьСтрокуВМассивПодстрок(ПутьКТэгу, ".");
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	
	Для Каждого Тэг Из Путь Цикл
		
		Если ПоЛокальнымИменам Тогда
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ЛокальноеИмяТэга");
		Иначе
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ИмяТэга");
		КонецЕсли;
		
		Если НужнаяСтрока = Неопределено Тогда
			Возврат Ложь;
		Иначе
			ТекущийНаборСтрок = НужнаяСтрока.Строки;
		КонецЕсли;		    
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьАтрибут(ПутьКАтрибуту, ПоЛокальнымИменам=Ложь) Экспорт
	Путь = РазложитьСтрокуВМассивПодстрок(ПутьКАтрибуту, ".");
	
	Если Путь.Количество() < 2 Тогда
		Возврат Ложь;  // Корень не может быть атрибутом
	КонецЕсли;
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	
	Инд = 0;
	
	Для Каждого Тэг Из Путь Цикл
		
		Если ПоЛокальнымИменам Тогда
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ЛокальноеИмяТэга");
		Иначе
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ИмяТэга");
		КонецЕсли;
		
		Если НужнаяСтрока = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Инд = Путь.Количество()-2 Тогда
			Если НужнаяСтрока.Атрибуты.Получить(Путь[Инд + 1]) = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Иначе
			ТекущийНаборСтрок = НужнаяСтрока.Строки;
		КонецЕсли;	
		
		Инд = Инд + 1;
		
	КонецЦикла;
КонецФункции

Функция Текст(ПутьКТэгу, ПоЛокальнымИменам=Ложь) Экспорт
	
	Путь = РазложитьСтрокуВМассивПодстрок(ПутьКТэгу, ".");
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	
	Инд = 0;
	
	Для Каждого Тэг Из Путь Цикл
		
		Если ПоЛокальнымИменам Тогда
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ЛокальноеИмяТэга");
		Иначе
			НужнаяСтрока = ТекущийНаборСтрок.Найти(Тэг, "ИмяТэга");
		КонецЕсли;
		
		Если НужнаяСтрока = Неопределено Тогда
			ВызватьИсключение "В пути [" + ПутьКТэгу + "] отсутствует элемент [" + Тэг + "]";
		КонецЕсли;
		
		Если Инд = Путь.Количество()-1 Тогда
			Если НужнаяСтрока = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Возврат СокрЛП(ПолучитьТекст(НужнаяСтрока));
			КонецЕсли;
		Иначе
			ТекущийНаборСтрок = НужнаяСтрока.Строки;
		КонецЕсли;	
		
		Инд = Инд + 1;
		
	КонецЦикла;
	
КонецФункции
#КонецОбласти

#Область Инициализация
Процедура ИнициализироватьРазбор(Путь) Экспорт
	
	Очистить();
	
	ПутьКФайлу = Путь;
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПутьКФайлу)
	
КонецПроцедуры

Процедура НачатьПоиск(ИскомоеИмя, ПоЛокальномуИмени=Ложь) Экспорт
	
	// Проверить, есть ли Путь
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПутьКФайлу);
	
	ИмяИскомогоТэга = ИскомоеИмя;
	
	ПоискПоЛокальномуИмени = ПоЛокальномуИмени;
	
КонецПроцедуры

Процедура УстановитьВыражениеФильтра(ПутьКСвойству, Эталон) Экспорт
	
	ВыражениеФильтра = Новый Структура;
	
	ВыражениеФильтра.Вставить("ПутьКСвойству", ПутьКСвойству);
	ВыражениеФильтра.Вставить("Эталон", Эталон);
	
КонецПроцедуры
#КонецОбласти

#Область Служебные
Процедура Очистить()
	
	ПутьКФайлу 				= Неопределено;
	ИмяИскомогоТэга 		= Неопределено;
	Чтение 					= Неопределено;	
	ПоискПоЛокальномуИмени	= Ложь;
	ВыражениеФильтра		= Неопределено;
	ТекущийУзел.Строки.Очистить()
	
КонецПроцедуры

Процедура ЗаполнитьТекущийУзел()
	// Тип узла Чтения должен быть ТипУзлаXML.НачалоЭлемента этот элемент (а не все целиком) мы и прочитаем в дерево
	
	ТекущийНаборСтрок = ТекущийУзел.Строки;
	НоваяСтрока = ТекущийНаборСтрок.Добавить();
    НоваяСтрока.ИмяТэга 			= Чтение.Имя;
	НоваяСтрока.ЛокальноеИмяТэга	= Чтение.ЛокальноеИмя; 
    НоваяСтрока.ЗначениеТэга 		= "";
	
	Атрибуты = Новый Соответствие;	
	Пока Чтение.ПрочитатьАтрибут() Цикл		
		Атрибуты.Вставить(Чтение.Имя, Чтение.Значение);
	КонецЦикла;
	НоваяСтрока.Атрибуты = Атрибуты;
	
	ТекущийНаборСтрок = НоваяСтрока.Строки; 
	
	х = 1;
	
	Пока Чтение.Прочитать() Цикл
		
		//Если х = 0 Тогда Прервать КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			НоваяСтрока = ТекущийНаборСтрок.Добавить();
		    НоваяСтрока.ИмяТэга 			= Чтение.Имя;
			НоваяСтрока.ЛокальноеИмяТэга	= Чтение.ЛокальноеИмя;
		    НоваяСтрока.ЗначениеТэга 		= "";
			
			Атрибуты = Новый Соответствие;	
			Пока Чтение.ПрочитатьАтрибут() Цикл		
				Атрибуты.Вставить(Чтение.Имя, Чтение.Значение);
			КонецЦикла;
			НоваяСтрока.Атрибуты = Атрибуты;
			
			ТекущийНаборСтрок = НоваяСтрока.Строки; 
			х = х + 1;	
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			
		    НоваяСтрока.ЗначениеТэга 	= НоваяСтрока.ЗначениеТэга + Чтение.Значение;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			х = х - 1;
			
			Если х > 0 Тогда
				ТекущийНаборСтрок 	= ТекущийНаборСтрок.Родитель.Родитель.Строки;
				НоваяСтрока 		= НоваяСтрока.Родитель;
			Иначе
				Прервать;
			КонецЕсли;;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

Процедура ЗаполнитьДеревоПоСтроке(ДеревоПриемник, СтрокаИсточник)
		
	Для Каждого Строка Из СтрокаИсточник.Строки Цикл
				
		НоваяСтрока = ДеревоПриемник.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		ЗаполнитьДеревоПоСтроке(НоваяСтрока, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекст(СтрокаДерева)
	
	Текст = "";
	
	Если СокрЛП(СтрокаДерева.ЗначениеТэга) <> "" Тогда
		Текст = Текст + СокрЛП(СтрокаДерева.ЗначениеТэга);
	КонецЕсли;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		ТекстСтроки = ПолучитьТекст(Строка);
		
		Если СокрЛП(ТекстСтроки) <> ""  Тогда
			Текст = Текст + ТекстСтроки + " ";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции
#КонецОбласти

ПутьКФайлу 				= "";
ТекущийУзел 			= Новый ДеревоЗначений;
ПоискПоЛокальномуИмени	= Ложь;
ИмяИскомогоТэга 		= "";
ВыражениеФильтра 		= Неопределено;
Чтение 					= Неопределено;

ТекущийУзел.Колонки.Добавить("ИмяТэга");
ТекущийУзел.Колонки.Добавить("ЛокальноеИмяТэга");
ТекущийУзел.Колонки.Добавить("ЗначениеТэга");
ТекущийУзел.Колонки.Добавить("Атрибуты");